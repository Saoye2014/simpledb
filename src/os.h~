#include<types.h>//off_t defined in that

//int sqliteOsDelete(const char*);
//int sqliteOsFileExists(const char*);
//int sqliteOsFileRename(const char*, const char*);
//int sqliteOsOpenReadWrite(const char*, OsFile*, int*);
//int sqliteOsOpenExclusive(const char*, OsFile*, int);
//int sqliteOsOpenReadOnly(const char*, OsFile*);
//int sqliteOsOpenDirectory(const char*, OsFile*);
//int sqliteOsTempFileName(char*);
//int sqliteOsClose(OsFile*);
//int sqliteOsRead(OsFile*, void*, int amt);
//int sqliteOsWrite(OsFile*, const void*, int amt);
//int sqliteOsSeek(OsFile*, off_t offset);
//int sqliteOsSync(OsFile*);
//int sqliteOsTruncate(OsFile*, off_t size);
//int sqliteOsFileSize(OsFile*, off_t *pSize);
//int sqliteOsReadLock(OsFile*);
//int sqliteOsWriteLock(OsFile*);
//int sqliteOsUnlock(OsFile*);
//int sqliteOsRandomSeed(char*);
//int sqliteOsSleep(int ms);
//int sqliteOsCurrentTime(double*);
//void sqliteOsEnterMutex(void);
//void sqliteOsLeaveMutex(void);
//char *sqliteOsFullPathname(const char*);

void mndbOsUnlock(OsFile *);
int mndbOsReadLock(OsFile *);
void mndbOsTempFileName(char *);
int mndbOsOpenExclusive(char* zFile, OsFile *, int);
char* mndbOsFullPathname(char* zFile);
int mndbOsOpenReadWrite(char *, Osfile*,int*);
void mndbOsClose(OsFile*);
int mndbOsFileSize(OsFile*, int *);
void mndbOsSeek(OsFile*, off_t);
int mndbOsWrite(OsFile*, void*, int);
struct OsFile;
#define MNDB_TEMPNAME_SIZE 200





















